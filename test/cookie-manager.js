const fs = require('fs-extra');
const path = require('path');

class CookieManager {
    constructor() {
        this.cookiePath = './auth/cookies.json';
        this.backupPath = './auth/cookies_backup.json';
    }

    /**
     * C·∫≠p nh·∫≠t cookie t·ª´ d·ªØ li·ªáu m·ªõi
     */
    async updateCookies(newCookies) {
        try {
            // Backup cookie c≈©
            if (await fs.pathExists(this.cookiePath)) {
                await fs.copy(this.cookiePath, this.backupPath);
                console.log('üì¶ ƒê√£ backup cookie c≈©');
            }

            // Validate format
            if (!Array.isArray(newCookies)) {
                throw new Error('Cookie ph·∫£i l√† m·ªôt m·∫£ng');
            }

            // Ki·ªÉm tra cookie b·∫Øt bu·ªôc
            const requiredKeys = ['c_user', 'xs'];
            const existingKeys = newCookies.map(c => c.key);
            
            for (const key of requiredKeys) {
                if (!existingKeys.includes(key)) {
                    throw new Error(`Cookie thi·∫øu key b·∫Øt bu·ªôc: ${key}`);
                }
            }

            // Chu·∫©n h√≥a format
            const normalizedCookies = newCookies.map(cookie => ({
                key: cookie.key,
                value: cookie.value,
                domain: cookie.domain || 'facebook.com',
                path: cookie.path || '/',
                creation: cookie.creation || Date.now(),
                lastAccessed: cookie.lastAccessed || Date.now()
            }));

            // L∆∞u cookie m·ªõi
            await fs.writeJson(this.cookiePath, normalizedCookies, { spaces: 2 });
            console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t cookie th√†nh c√¥ng');

            // Hi·ªÉn th·ªã th√¥ng tin
            const cUserCookie = normalizedCookies.find(c => c.key === 'c_user');
            if (cUserCookie) {
                console.log(`üë§ User ID: ${cUserCookie.value}`);
            }

            return true;
        } catch (error) {
            console.error('‚ùå L·ªói c·∫≠p nh·∫≠t cookie:', error.message);
            
            // Kh√¥i ph·ª•c backup n·∫øu c√≥ l·ªói
            if (await fs.pathExists(this.backupPath)) {
                await fs.copy(this.backupPath, this.cookiePath);
                console.log('üîÑ ƒê√£ kh√¥i ph·ª•c cookie t·ª´ backup');
            }
            
            return false;
        }
    }

    /**
     * Kh√¥i ph·ª•c cookie t·ª´ backup
     */
    async restoreFromBackup() {
        try {
            if (!await fs.pathExists(this.backupPath)) {
                throw new Error('Kh√¥ng t√¨m th·∫•y file backup');
            }

            await fs.copy(this.backupPath, this.cookiePath);
            console.log('‚úÖ ƒê√£ kh√¥i ph·ª•c cookie t·ª´ backup');
            return true;
        } catch (error) {
            console.error('‚ùå L·ªói kh√¥i ph·ª•c backup:', error.message);
            return false;
        }
    }

    /**
     * Hi·ªÉn th·ªã th√¥ng tin cookie hi·ªán t·∫°i
     */
    async showCurrentCookies() {
        try {
            if (!await fs.pathExists(this.cookiePath)) {
                console.log('‚ùå Kh√¥ng t√¨m th·∫•y file cookie');
                return;
            }

            const cookies = await fs.readJson(this.cookiePath);
            console.log('üç™ Cookie hi·ªán t·∫°i:');
            console.log(`   üìä S·ªë l∆∞·ª£ng: ${cookies.length}`);
            
            cookies.forEach((cookie, index) => {
                const value = cookie.value.length > 20 ? cookie.value.substring(0, 20) + '...' : cookie.value;
                console.log(`   ${index + 1}. ${cookie.key}: ${value}`);
            });

            const cUserCookie = cookies.find(c => c.key === 'c_user');
            if (cUserCookie) {
                console.log(`   üë§ User ID: ${cUserCookie.value}`);
            }

            // Ki·ªÉm tra th·ªùi h·∫°n
            const now = Date.now();
            const oldestCookie = Math.min(...cookies.map(c => c.lastAccessed || c.creation || now));
            const daysSinceUpdate = Math.floor((now - oldestCookie) / (1000 * 60 * 60 * 24));
            
            if (daysSinceUpdate > 7) {
                console.log(`   ‚ö†Ô∏è  Cookie ƒë√£ ${daysSinceUpdate} ng√†y tu·ªïi, n√™n c·∫≠p nh·∫≠t`);
            } else {
                console.log(`   ‚úÖ Cookie c√≤n m·ªõi (${daysSinceUpdate} ng√†y tu·ªïi)`);
            }

        } catch (error) {
            console.error('‚ùå L·ªói ƒë·ªçc cookie:', error.message);
        }
    }

    /**
     * X√≥a cookie (v·ªõi x√°c nh·∫≠n)
     */
    async deleteCookies() {
        try {
            if (!await fs.pathExists(this.cookiePath)) {
                console.log('‚ùå Kh√¥ng t√¨m th·∫•y file cookie ƒë·ªÉ x√≥a');
                return;
            }

            // Backup tr∆∞·ªõc khi x√≥a
            await fs.copy(this.cookiePath, this.backupPath);
            await fs.remove(this.cookiePath);
            
            console.log('‚úÖ ƒê√£ x√≥a cookie (ƒë√£ backup)');
            return true;
        } catch (error) {
            console.error('‚ùå L·ªói x√≥a cookie:', error.message);
            return false;
        }
    }
}

// CLI Interface
async function main() {
    const cookieManager = new CookieManager();
    const args = process.argv.slice(2);
    const command = args[0];

    switch (command) {
        case 'show':
        case 'info':
            await cookieManager.showCurrentCookies();
            break;
            
        case 'restore':
            await cookieManager.restoreFromBackup();
            break;
            
        case 'delete':
            await cookieManager.deleteCookies();
            break;
            
        case 'update':
            if (args[1]) {
                try {
                    const newCookies = JSON.parse(args[1]);
                    await cookieManager.updateCookies(newCookies);
                } catch (error) {
                    console.error('‚ùå D·ªØ li·ªáu cookie kh√¥ng h·ª£p l·ªá');
                }
            } else {
                console.log('‚ùå Vui l√≤ng cung c·∫•p d·ªØ li·ªáu cookie');
                console.log('   V√≠ d·ª•: node cookie-manager.js update \'[{"key":"c_user","value":"123"}]\'');
            }
            break;
            
        default:
            console.log('üç™ Cookie Manager - ConvoX Bot');
            console.log('');
            console.log('C√°ch s·ª≠ d·ª•ng:');
            console.log('  node cookie-manager.js show     - Hi·ªÉn th·ªã cookie hi·ªán t·∫°i');
            console.log('  node cookie-manager.js restore  - Kh√¥i ph·ª•c t·ª´ backup');
            console.log('  node cookie-manager.js delete   - X√≥a cookie hi·ªán t·∫°i');
            console.log('  node cookie-manager.js update   - C·∫≠p nh·∫≠t cookie m·ªõi');
            console.log('');
            console.log('V√≠ d·ª• c·∫≠p nh·∫≠t cookie:');
            console.log('  node cookie-manager.js update \'[{"key":"c_user","value":"123"}]\'');
    }
}

if (require.main === module) {
    main();
}

module.exports = CookieManager;
