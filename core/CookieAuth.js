const fs = require('fs-extra');
const path = require('path');

class CookieAuth {
    constructor(logger = null) {
        this.logger = logger;
        this.cookiePath = './auth/cookies.json';
    }

    /**
     * Chuy·ªÉn ƒë·ªïi cookie format th√†nh appState format cho fca-unofficial
     */
    convertCookiesToAppState(cookies) {
        if (!Array.isArray(cookies)) {
            throw new Error('Cookie ph·∫£i l√† m·ªôt m·∫£ng');
        }

        const appState = [];
        
        for (const cookie of cookies) {
            const appStateItem = {
                key: cookie.key,
                value: cookie.value,
                domain: cookie.domain || '.facebook.com',
                path: cookie.path || '/',
                hostOnly: false,
                creation: new Date(cookie.creation || Date.now()),
                lastAccessed: new Date(cookie.lastAccessed || Date.now())
            };

            // Th√™m secure v√† httpOnly cho m·ªôt s·ªë cookie ƒë·∫∑c bi·ªát
            if (['xs', 'c_user', 'datr'].includes(cookie.key)) {
                appStateItem.secure = true;
                appStateItem.httpOnly = true;
            }

            appState.push(appStateItem);
        }

        return appState;
    }

    /**
     * ƒê·ªçc cookie t·ª´ file
     */
    async loadCookies() {
        try {
            if (!await fs.pathExists(this.cookiePath)) {
                throw new Error(`Kh√¥ng t√¨m th·∫•y file cookie: ${this.cookiePath}`);
            }

            const cookieData = await fs.readJson(this.cookiePath);
            
            if (!Array.isArray(cookieData)) {
                throw new Error('Format cookie kh√¥ng h·ª£p l·ªá. Ph·∫£i l√† m·ªôt m·∫£ng.');
            }

            if (this.logger) {
                this.logger.info(`ƒê√£ load ${cookieData.length} cookies t·ª´ ${this.cookiePath}`);
            }

            return cookieData;
        } catch (error) {
            if (this.logger) {
                this.logger.logError(error, 'L·ªói khi ƒë·ªçc file cookie');
            }
            throw error;
        }
    }

    /**
     * L∆∞u appState m·ªõi v√†o file cookie (backup)
     */
    async saveAppStateAsCookie(appState) {
        try {
            const backupPath = './auth/cookies_backup.json';
            const cookies = appState.map(item => ({
                key: item.key,
                value: item.value,
                domain: item.domain,
                path: item.path,
                creation: new Date(item.creation).getTime(),
                lastAccessed: new Date(item.lastAccessed).getTime()
            }));

            await fs.writeJson(backupPath, cookies, { spaces: 2 });
            
            if (this.logger) {
                this.logger.info(`ƒê√£ backup appState v√†o ${backupPath}`);
            }
        } catch (error) {
            if (this.logger) {
                this.logger.logError(error, 'L·ªói khi backup appState');
            }
        }
    }

    /**
     * Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa cookie
     */
    validateCookies(cookies) {
        const requiredKeys = ['c_user', 'xs'];
        const existingKeys = cookies.map(c => c.key);
        
        for (const key of requiredKeys) {
            if (!existingKeys.includes(key)) {
                throw new Error(`Cookie thi·∫øu key b·∫Øt bu·ªôc: ${key}`);
            }
        }

        // Ki·ªÉm tra c_user c√≥ ph·∫£i l√† s·ªë kh√¥ng
        const cUserCookie = cookies.find(c => c.key === 'c_user');
        if (cUserCookie && !/^\d+$/.test(cUserCookie.value)) {
            throw new Error('Cookie c_user kh√¥ng h·ª£p l·ªá');
        }

        return true;
    }

    /**
     * X·ª≠ l√Ω checkpoint v√† retry logic
     */
    async handleCheckpoint(error, retryCallback) {
        if (!error || typeof error.message !== 'string') {
            return false;
        }

        const errorMsg = error.message.toLowerCase();
        const isCheckpoint = errorMsg.includes('checkpoint') || 
                           errorMsg.includes('security') ||
                           errorMsg.includes('verification') ||
                           errorMsg.includes('review');

        if (!isCheckpoint) {
            return false;
        }

        if (this.logger) {
            this.logger.warn('üîí Ph√°t hi·ªán checkpoint Facebook. ƒêang th·ª≠ v∆∞·ª£t...');
        }

        // Th·ª≠ c√°c ph∆∞∆°ng ph√°p v∆∞·ª£t checkpoint
        const strategies = [
            this.bypassWithDelay.bind(this),
            this.bypassWithUserAgent.bind(this),
            this.bypassWithCookieRefresh.bind(this)
        ];

        for (let i = 0; i < strategies.length; i++) {
            try {
                if (this.logger) {
                    this.logger.info(`ƒêang th·ª≠ ph∆∞∆°ng ph√°p v∆∞·ª£t checkpoint ${i + 1}/${strategies.length}`);
                }

                await strategies[i]();
                
                // Th·ª≠ k·∫øt n·ªëi l·∫°i
                const result = await retryCallback();
                if (result) {
                    if (this.logger) {
                        this.logger.success('‚úÖ ƒê√£ v∆∞·ª£t checkpoint th√†nh c√¥ng!');
                    }
                    return true;
                }
            } catch (retryError) {
                if (this.logger) {
                    this.logger.warn(`Ph∆∞∆°ng ph√°p ${i + 1} th·∫•t b·∫°i: ${retryError.message}`);
                }
            }
        }

        if (this.logger) {
            this.logger.error('‚ùå Kh√¥ng th·ªÉ v∆∞·ª£t checkpoint. Vui l√≤ng c·∫≠p nh·∫≠t cookie m·ªõi.');
        }
        return false;
    }

    /**
     * Ph∆∞∆°ng ph√°p 1: Delay v√† th·ª≠ l·∫°i
     */
    async bypassWithDelay() {
        if (this.logger) {
            this.logger.info('ƒêang delay 30 gi√¢y...');
        }
        await this.sleep(30000);
    }

    /**
     * Ph∆∞∆°ng ph√°p 2: Thay ƒë·ªïi User-Agent
     */
    async bypassWithUserAgent() {
        if (this.logger) {
            this.logger.info('ƒêang th·ª≠ v·ªõi User-Agent m·ªõi...');
        }
        
        // C·∫≠p nh·∫≠t User-Agent ng·∫´u nhi√™n
        const userAgents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        ];
        
        const randomUA = userAgents[Math.floor(Math.random() * userAgents.length)];
        process.env.USER_AGENT = randomUA;
        
        await this.sleep(5000);
    }

    /**
     * Ph∆∞∆°ng ph√°p 3: Refresh cookie timestamps
     */
    async bypassWithCookieRefresh() {
        try {
            if (this.logger) {
                this.logger.info('ƒêang refresh timestamps c·ªßa cookies...');
            }

            const cookies = await this.loadCookies();
            const now = Date.now();
            
            // C·∫≠p nh·∫≠t timestamps
            const refreshedCookies = cookies.map(cookie => ({
                ...cookie,
                creation: now,
                lastAccessed: now
            }));

            await fs.writeJson(this.cookiePath, refreshedCookies, { spaces: 2 });
            await this.sleep(3000);
            
        } catch (error) {
            if (this.logger) {
                this.logger.logError(error, 'L·ªói khi refresh cookies');
            }
            throw error;
        }
    }

    /**
     * Utility: Sleep function
     */
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * L·∫•y User ID t·ª´ cookie c_user
     */
    getUserIdFromCookies(cookies) {
        const cUserCookie = cookies.find(c => c.key === 'c_user');
        return cUserCookie ? cUserCookie.value : null;
    }

    /**
     * Ki·ªÉm tra cookie c√≥ h·∫øt h·∫°n kh√¥ng
     */
    isExpired(cookies) {
        try {
            const xsCookie = cookies.find(c => c.key === 'xs');
            if (!xsCookie) return true;

            // Gi·∫£i m√£ ph·∫ßn timestamp t·ª´ xs cookie
            const xsValue = decodeURIComponent(xsCookie.value);
            const timestampMatch = xsValue.match(/:(\d+):/);
            
            if (timestampMatch) {
                const timestamp = parseInt(timestampMatch[1]);
                const now = Math.floor(Date.now() / 1000);
                
                // N·∫øu timestamp c√°ch hi·ªán t·∫°i qu√° 30 ng√†y th√¨ coi nh∆∞ h·∫øt h·∫°n
                return (now - timestamp) > (30 * 24 * 60 * 60);
            }
            
            return false;
        } catch (error) {
            return true; // N·∫øu kh√¥ng parse ƒë∆∞·ª£c th√¨ coi nh∆∞ h·∫øt h·∫°n
        }
    }
}

module.exports = CookieAuth;
