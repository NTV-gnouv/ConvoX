'use strict';

const axios = require('axios');

class PhatNguoiPlugin {
    constructor(api, config, authManager, logger) {
        this.api = api;
        this.authManager = authManager;
        this.logger = logger;
        this.name = 'PhatNguoiVN';
        this.version = '1.0.0';
        this.isInitialized = false;

        // C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
        this.config = {
            enabled: true,
            cooldown: 8,
            // Danh s√°ch provider th·ª≠ tra c·ª©u (t√πy ch·ªçn, c√≥ th·ªÉ ƒë·ªÉ r·ªóng). M·ªói provider l√† 1 h√†m async (plate, frameLast6) => { found, data, source }.
            providers: [],
            // Timeout cho m·ªói provider (ms)
            providerTimeoutMs: 10000,
            // Tr·∫£ k√®m link h∆∞·ªõng d·∫´n ch√≠nh th·ªëng n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£
            includeOfficialLinks: true,
            // Ch·ªâ tr·∫£ v·ªÅ d√≤ng k·∫øt qu·∫£ ng·∫Øn g·ªçn (m·∫∑c ƒë·ªãnh: true)
            compactOutput: true,
            ...config
        };
    }

    async initialize() {
        this.isInitialized = true;
        this.logger && this.logger.info('[PhatNguoi] Plugin initialized');
    }

    // Helper: set reaction safely with timeout (avoid hanging if callback not fired)
    async setReactionSafe(reaction, messageID, timeoutMs = 8000) {
        if (!messageID) return false;
        try {
            await new Promise((resolve) => {
                let done = false;
                const t = setTimeout(() => { if (!done) { done = true; resolve(false); } }, timeoutMs);
                try {
                    this.api.setMessageReaction(reaction, messageID, () => {
                        if (done) return; done = true; clearTimeout(t); resolve(true);
                    });
                } catch (_) {
                    if (done) return; done = true; clearTimeout(t); resolve(false);
                }
            });
            return true;
        } catch (_) {
            return false;
        }
    }

    registerCommands(commandHandler) {
        commandHandler.registerCommand('phatnguoi', this.handleLookup.bind(this), {
            description: 'Tra c·ª©u ph·∫°t ngu·ªôi xe Vi·ªát Nam theo bi·ªÉn s·ªë',
            usage: '!phatnguoi <bi·ªÉn_s·ªë> [6_s·ªë_khung]',
            example: '!phatnguoi 30A-123.45 | !phatnguoi 51F12345 ABC123',
            category: 'utility',
            cooldown: this.config.cooldown,
            adminOnly: false
        });
    }

    // === Command handler ===
    async handleLookup(event, args = []) {
        const { threadID, messageID } = event;

        if (!args.length) {
            await this.api.sendMessage(this.helpText(), threadID);
            return;
        }

        const rawPlate = args[0];
        const frame6 = (args[1] || '').trim();
        const norm = this.normalizePlate(rawPlate);

        if (!norm.valid) {
            await this.api.sendMessage(
                '‚ùå Bi·ªÉn s·ªë kh√¥ng h·ª£p l·ªá. V√≠ d·ª•: 30A-123.45, 51F-12345, 43C-123.45\n' +
                'G·ª£i √Ω: d√πng ƒë·ªãnh d·∫°ng 2-3 k√Ω t·ª± ƒë·∫ßu + s·ªë (c√≥ th·ªÉ c√≥ d·∫•u \"-\" ho·∫∑c \".\").',
                threadID
            );
            return;
        }

    // Th·∫£ icon ƒë·ªìng h·ªì c√°t v√†o tin nh·∫Øn l·ªánh (kh√¥ng ƒë·ªÉ treo)
    await this.setReactionSafe('‚åõ', messageID, 5000);

        try {
            const result = await this.queryProvidersWithTimeout(norm.compact, frame6);

            if (result && result.found) {
                const msg = this.formatFound(result, norm.display);
        await this.api.sendMessage(msg, threadID);
                // ƒê·ªïi sang t√≠ch xanh
                await this.setReactionSafe('‚úÖ', messageID, 5000);
                return;
            }

            // Kh√¥ng c√≥ k·∫øt qu·∫£ ho·∫∑c provider kh√¥ng kh·∫£ d·ª•ng
            if (this.config.compactOutput !== false) {
                // Ch·∫ø ƒë·ªô g·ªçn: ch·ªâ m·ªôt d√≤ng k·∫øt qu·∫£
                await this.api.sendMessage(`‚úÖ K·∫øt qu·∫£: Ch∆∞a ghi nh·∫≠n ph·∫°t ngu·ªôi (b·∫°n c√≥ th·ªÉ tra c·ª©u kƒ© h∆°n tr√™n ngu·ªìn ch√≠nh BCA) : ${norm.display}`, threadID);
            } else {
                // Ch·∫ø ƒë·ªô chi ti·∫øt: k√®m li√™n k·∫øt & m·∫πo
                const links = this.buildOfficialLinks(norm.compact);
                const tips = this.buildTips(frame6);
                const text = [
                    `‚úÖ K·∫øt qu·∫£: Ch∆∞a ghi nh·∫≠n ph·∫°t ngu·ªôi (b·∫°n c√≥ th·ªÉ tra c·ª©u kƒ© h∆°n tr√™n ngu·ªìn ch√≠nh BCA) : ${norm.display}`,
                    '',
                    'B·∫°n c√≥ th·ªÉ t·ª± tra c·ª©u theo c√°c c·ªïng ch√≠nh th·ªëng:',
                    ...links,
                    '',
                    ...tips
                ].join('\n');
                await this.api.sendMessage(text, threadID);
            }
            // ƒê·ªïi sang t√≠ch xanh
            await this.setReactionSafe('‚úÖ', messageID, 5000);
        } catch (err) {
            this.logger && this.logger.logError(err, '[PhatNguoi] lookup failed');
            if (this.config.compactOutput !== false) {
                await this.api.sendMessage('‚ö†Ô∏è Kh√¥ng th·ªÉ tra c·ª©u t·ª± ƒë·ªông l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.', threadID);
            } else {
                const links = this.buildOfficialLinks(norm.compact);
                await this.api.sendMessage(
                    '‚ö†Ô∏è Kh√¥ng th·ªÉ tra c·ª©u t·ª± ƒë·ªông l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c d√πng c√°c c·ªïng d∆∞·ªõi ƒë√¢y:\n' +
                    links.join('\n'),
                    threadID
                );
            }
            // ƒê·ªïi sang d·∫•u X khi l·ªói
            await this.setReactionSafe('‚ùå', messageID, 5000);
        }
    }

    helpText() {
        return (
            'C√°ch d√πng: !phatnguoi <bi·ªÉn_s·ªë> [6_s·ªë_khung]\n' +
            'V√≠ d·ª•: !phatnguoi 30A-123.45 | !phatnguoi 51F12345 ABC123\n' +
            'G·ª£i √Ω: Th√™m 6 s·ªë cu·ªëi s·ªë khung (n·∫øu bi·∫øt) ƒë·ªÉ tƒÉng kh·∫£ nƒÉng tra c·ª©u ·ªü m·ªôt s·ªë c·ªïng.'
        );
    }

    // === Providers orchestration ===
    async queryProvidersWithTimeout(plateCompact, frameLast6) {
        const providers = Array.isArray(this.config.providers) ? this.config.providers : [];
        if (!providers.length) return null; // link-only mode

        for (const provider of providers) {
            try {
                const res = await this.runWithTimeout(provider(plateCompact, frameLast6), this.config.providerTimeoutMs);
                if (res && res.found) return res;
            } catch (e) {
                // ti·∫øp t·ª•c th·ª≠ provider ti·∫øp theo
            }
        }
        return null;
    }

    async runWithTimeout(promise, ms = 10000) {
        let t;
        return await Promise.race([
            promise,
            new Promise((_, rej) => t = setTimeout(() => rej(new Error('timeout')), ms))
        ]).finally(() => t && clearTimeout(t));
    }

    // === Formatting ===
    formatFound(result, displayPlate) {
        const lines = [`üö® C√≥ th·ªÉ c√≥ ph·∫°t ngu·ªôi cho: ${displayPlate}`];
        if (result.source) lines.push(`Ngu·ªìn: ${result.source}`);

        const items = Array.isArray(result.data) ? result.data : [];
        if (!items.length) return lines.concat(['(Kh√¥ng c√≥ chi ti·∫øt tr·∫£ v·ªÅ)']).join('\n');

        items.slice(0, 5).forEach((it, idx) => {
            const place = it.place || it.location || 'Kh√¥ng r√µ ƒë·ªãa ƒëi·ªÉm';
            const time = it.time || it.date || it.violationTime || 'Kh√¥ng r√µ th·ªùi gian';
            const law = it.law || it.violation || it.content || 'H√†nh vi vi ph·∫°m kh√¥ng r√µ';
            const plate = it.plate || displayPlate;
            const status = it.status || it.state || 'Ch∆∞a x·ª≠ l√Ω/Kh√¥ng r√µ';
            lines.push(`‚Ä¢ #${idx + 1} | ${time} | ${place}`);
            lines.push(`  - Bi·ªÉn: ${plate}`);
            lines.push(`  - L·ªói: ${law}`);
            lines.push(`  - Tr·∫°ng th√°i: ${status}`);
            if (it.document || it.ticket || it.decision) {
                lines.push(`  - Quy·∫øt ƒë·ªãnh/bi√™n b·∫£n: ${it.document || it.ticket || it.decision}`);
            }
        });

        if (items.length > 5) lines.push(`... v√† ${items.length - 5} k·∫øt qu·∫£ kh√°c`);
        lines.push('', 'Khuy·∫øn ngh·ªã: Vui l√≤ng x√°c minh l·∫°i tr√™n c·ªïng ch√≠nh th·ªëng tr∆∞·ªõc khi n·ªôp ph·∫°t.');
        return lines.join('\n');
    }

    // === Utilities ===
    normalizePlate(input = '') {
        const s = (input || '').toUpperCase().trim();
        // Lo·∫°i b·ªè k√Ω t·ª± kh√¥ng ph·∫£i ch·ªØ/s·ªë
        const alnum = s.replace(/[^A-Z0-9]/g, '');
        // M·∫´u chung VN: NN[L|LL|LLL]DDDD[DD]
        const m = alnum.match(/^(\d{2,3}[A-Z]{1,3})(\d{4,6})$/);
        if (!m) {
            // Kh√¥ng kh·ªõp m·∫´u ph·ªï bi·∫øn => invalid
            return { valid: false, compact: alnum, display: s };
        }
        const prefix = m[1];
        const number = m[2];
        // D·∫°ng hi·ªÉn th·ªã: prefix-xxx.xx (5) | prefix-xxxx (4) | prefix-xxx.xxx (6)
        let tail;
        if (number.length === 5) tail = `${number.slice(0, 3)}.${number.slice(3)}`;
        else if (number.length === 6) tail = `${number.slice(0, 3)}.${number.slice(3)}`;
        else tail = number; // 4
        const display = `${prefix}-${tail}`;
        return { valid: true, compact: `${prefix}${number}`, display };
    }

    buildOfficialLinks(plateCompact) {
        const links = [];
        // C·ª•c CSGT (trang th√¥ng tin, c√≥ th·ªÉ y√™u c·∫ßu captcha/ƒëƒÉng nh·∫≠p ·ªü c√°c b∆∞·ªõc ti·∫øp):
        links.push('‚Ä¢ C·ª•c CSGT: https://www.csgt.vn/ (m·ª•c Tra c·ª©u/Th√¥ng tin x·ª≠ ph·∫°t)');
        // C·ªïng DVC Qu·ªëc gia (B·ªô C√¥ng an): ƒë∆∞·ªùng d·∫´n thay ƒë·ªïi theo th·ªùi gian, ƒë·ªÉ trang ch·ªß DVC
        links.push('‚Ä¢ C·ªïng D·ªãch v·ª• c√¥ng B·ªô C√¥ng an: https://dichvucong.bocongan.gov.vn/');
        // M·ªôt s·ªë ƒë·ªãa ph∆∞∆°ng th∆∞·ªùng d√πng (tham kh·∫£o, c√≥ th·ªÉ thay ƒë·ªïi):
        links.push('‚Ä¢ H√† N·ªôi: https://congdan.hanoi.gov.vn/tra-cuu-xu-phat-nguoi-vi-pham-giao-thong');
        links.push('‚Ä¢ TP.HCM (tham kh·∫£o): https://thongtinkhachsatgt.hochiminhcity.gov.vn/ ho·∫∑c c·ªïng DVC ƒë·ªãa ph∆∞∆°ng');
        // ƒêƒÉng ki·ªÉm (kh√¥ng ph·∫£i ph·∫°t ngu·ªôi, nh∆∞ng tra c·ª©u th√¥ng tin xe):
        links.push('‚Ä¢ ƒêƒÉng ki·ªÉm (th√¥ng tin ph∆∞∆°ng ti·ªán): https://app.vr.org.vn/ptpublic/#!/home');
        return links;
    }

    buildTips(frame6) {
        const tips = [
            'M·∫πo tra c·ª©u:',
            '- Chu·∫©n h√≥a bi·ªÉn s·ªë (b·ªè d·∫•u ch·∫•m/c√°ch). V√≠ d·ª•: 30A12345, 51F12345.',
            '- M·ªôt s·ªë c·ªïng y√™u c·∫ßu 6 s·ªë cu·ªëi s·ªë khung (VIN) ƒë·ªÉ x√°c th·ª±c.',
            '- K·∫øt qu·∫£ tr√™n Internet ch·ªâ mang t√≠nh tham kh·∫£o. Vui l√≤ng x√°c nh·∫≠n t·∫°i c∆° quan c√≥ th·∫©m quy·ªÅn.'
        ];
        if (frame6) tips.push(`- B·∫°n ƒë√£ cung c·∫•p 6 s·ªë khung: ${frame6}`);
        return tips;
    }

    async cleanup() {
        this.logger && this.logger.info('[PhatNguoi] Plugin cleaned up');
    }

    getInfo() {
        return {
            name: this.name,
            version: this.version,
            description: 'Tra c·ª©u ph·∫°t ngu·ªôi (best‚Äëeffort) + li√™n k·∫øt ch√≠nh th·ªëng',
            credits: 'ConvoX Team'
        };
    }
}

module.exports = PhatNguoiPlugin;
